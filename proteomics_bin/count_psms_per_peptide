#!/usr/bin/env python
"""
Count the PSMs with q<0.01, grouped by peptide. Return a spreadsheet with two columns,
peptide and count
"""

import argparse
import logging
from datetime import datetime
import sys
import csv
import re


__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)

DEFAULT_MAX_QVALUE = 0.01
DEFAULT_QVALUE_COLNAME = "percolator q-value"
DEFAULT_PEPSEQ_COLNAME = "sequence"

csv.field_size_limit(sys.maxsize)


def main():

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input file')
    parser.add_argument('--out', type=argparse.FileType('w'), required=True,
                        help='output file')
    parser.add_argument('--qvalcol', default=DEFAULT_QVALUE_COLNAME, help='name of the q-value column')
    parser.add_argument('--peptidecol', default=DEFAULT_PEPSEQ_COLNAME, help='name of the peptide sequence column')
    parser.add_argument('--maxq', default=DEFAULT_MAX_QVALUE, type=float, help='q-value cutoff')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO, 
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    pattern = re.compile('[\W_]+', re.UNICODE)
    peptide_count_map = {}
    reader = csv.DictReader(args.infile, delimiter='\t')
    if args.qvalcol not in reader.fieldnames:
        found_it = False
        for fieldname in reader.fieldnames:
            if 'q-value' in fieldname:
                args.qvalcol = fieldname
                found_it = True
                break
        if not found_it:
            quit("file %s: %s not in file columns:\n%s" % (args.infile.name, args.qvalcol, reader.fieldnames))
    for row in reader:
        qval = row[args.qvalcol]
        if float(qval) < args.maxq:
            pepseq = pattern.sub('', row[args.peptidecol])
            if pepseq not in peptide_count_map:
                peptide_count_map[pepseq] = 0
            peptide_count_map[pepseq] += 1
    args.out.write("sequence\tcount\n")
    for pepseq in peptide_count_map:
        args.out.write("%s\t%d\n" % (pepseq, peptide_count_map[pepseq]))
    args.out.close()
    print("Done. Wrote %d lines." % len(peptide_count_map))


start_time = datetime.now()
logger.debug("Start time: %s" % start_time)
main()
logger.debug("End time: %s" % datetime.now())
logger.debug("Elapsed time: %s" % (datetime.now() - start_time))
