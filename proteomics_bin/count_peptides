#!/usr/bin/env python
"""
Count the *unique peptide sequences* identified with q<0.01.
"""

import argparse
import logging
from datetime import datetime
import csv
import sys

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)

DEFAULT_MAX_QVALUE = 0.01
DEFAULT_QVALUE_COLNAME = "percolator q-value"
DEFAULT_PEPTIDE_COLNAME = "sequence"

csv.field_size_limit(sys.maxsize)

def main():

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infiles', type=argparse.FileType('r'), nargs='+',
                        help='input file(s)')
    parser.add_argument('--peptidecol', default=DEFAULT_PEPTIDE_COLNAME, help='name of the sequence column')
    parser.add_argument('--qvalcol', default=DEFAULT_QVALUE_COLNAME, help='name of the q-value column')
    parser.add_argument('--qvalue', default=DEFAULT_MAX_QVALUE, type=float, help='q-value cutoff')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO, 
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    print("file\ttotal")
    for infile in args.infiles:
        reader = csv.DictReader(infile, delimiter='\t')
        pepseqs = set()
        if args.qvalcol not in reader.fieldnames:
            quit("%s not in file columns:\n%s" % (args.qvalcol, reader.fieldnames))
        if args.peptidecol not in reader.fieldnames:
            quit("%s not in file columns:\n%s" % (args.peptidecol, reader.fieldnames))
        for row in reader:
            qval = row[args.qvalcol]
            if float(qval) < args.qvalue:
                pepseqs.add(row[args.peptidecol])
        print("%s\t%d" % (infile.name, len(pepseqs)))


start_time = datetime.now()
logger.debug("Start time: %s" % start_time)
main()
logger.debug("End time: %s" % datetime.now())
logger.debug("Elapsed time: %s" % (datetime.now() - start_time))
