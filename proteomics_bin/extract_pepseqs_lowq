#!/usr/bin/env python
"""
extract peptide sequences from PSMs with low Q-values from one or more percolator psm output files (union).
Write them one per line to a file
"""

import argparse
import logging
from datetime import datetime
import csv

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)

DEFAULT_MAXQ = 0.01
DEFAULT_PEPSEQ_COL = 'sequence'

def main():

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infiles', type=argparse.FileType('r'), nargs='+',
                        help='input file')
    parser.add_argument('--qvalcol', required=True, help='name of the q-value column')
    parser.add_argument('--maxq', type=float, default=DEFAULT_MAXQ,
                        help='maximum q-value')
    parser.add_argument('--pepseqcol', default=DEFAULT_PEPSEQ_COL, help='name of the peptide sequence column')
    parser.add_argument('--out', required=True, type=argparse.FileType('w'),
                        help='output file')

    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO, 
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    seqs_written = set()
    for infile in args.infiles:
        print("processing file %s" % infile.name)
        reader = csv.DictReader(infile, delimiter='\t')
        if args.pepseqcol not in reader.fieldnames:
            print("Column %s not in available columns: \n%s" % (args.pepseqcol, reader.fieldnames))
            quit()
        for row in reader:
            seq = row[args.pepseqcol]
            if float(row[args.qvalcol]) < args.maxq:
                if seq not in seqs_written:
                    args.out.write(seq + '\n')
                seqs_written.add(row[args.pepseqcol])
    args.out.close()
    print("Done. Wrote %d sequences" % len(seqs_written))

start_time = datetime.now()
logger.debug("Start time: %s" % start_time)
main()
logger.debug("End time: %s" % datetime.now())
logger.debug("Elapsed time: %s" % (datetime.now() - start_time))
