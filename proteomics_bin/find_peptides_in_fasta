#!/usr/bin/env python
"""
Look for peptides in a fasta file. Strict sequence search, not tryptic.
Report the ones you find to stdout.
Optionally list which proteins they belong to.
"""

import argparse
import logging
from datetime import datetime
from pyvalise.io import fasta_io

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def declare_gather_args():
    """
    Declare all arguments, parse them, and return the args dict.
    Does no validation beyond the implicit validation done by argparse.
    return: a dict mapping arg names to values
    """

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('pepfile', type=argparse.FileType('r'),
                        help='input peptides file')
    parser.add_argument('fasta', type=argparse.FileType('r'),
                        help='input fasta file')
    parser.add_argument('--listproteins', action="store_true", help='List the proteins each peptide belongs to')

    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    return parser.parse_args()


def main():
    args = declare_gather_args()
    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    script_start_time = datetime.now()
    logger.debug("Start time: %s" % script_start_time)

    # do stuff here
    peptides = set([line.strip() for line in args.pepfile])
    peptide_proteins_map = {}
    for record in fasta_io.load_fasta_records(args.fasta):
        peps_to_remove = []
        for peptide in peptides:
            if peptide in record.seq:
                if args.listproteins:
                    if peptide not in peptide_proteins_map:
                        peptide_proteins_map[peptide] = []
                    peptide_proteins_map[peptide].append(record.name)
                else:
                    print(peptide)
                    peps_to_remove.append(peptide)
        for pep in peps_to_remove:
            peptides.remove(pep)
    if args.listproteins:
        for peptide in peptide_proteins_map:
            print("%s\t%s" % (peptide, ",".join(peptide_proteins_map[peptide])))

    logger.debug("End time: %s. Elapsed time: %s" % (datetime.now(), datetime.now() - script_start_time))


main()
