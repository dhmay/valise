#!/usr/bin/env python
"""
Count the PSMs with q<0.01.

There's some nasty hardcoded junk in here for counting up IDs by different protein databases,
as deduced by protein name prefixes.
"""

import argparse
import logging
from datetime import datetime
import csv

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)

DEFAULT_MAX_QVALUE = 0.01
DEFAULT_QVALUE_COLNAME = "percolator q-value"


def main():

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infiles', type=argparse.FileType('r'), nargs='+',
                        help='input file(s)')
    parser.add_argument('--qvalcol', default=DEFAULT_QVALUE_COLNAME, help='name of the q-value column')
    parser.add_argument('--qvalue', default=DEFAULT_MAX_QVALUE, type=float, help='q-value cutoff')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO, 
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    print("file\tpsms")
    for infile in args.infiles:
        reader = csv.DictReader(infile, delimiter='\t')
        n_lessthan_qvalue = 0
        n_total = 0
        if reader.fieldnames is not None:
            if args.qvalcol not in reader.fieldnames:
                found_it = False
                for fieldname in reader.fieldnames:
                    if 'q-value' in fieldname:
                        args.qvalcol = fieldname
                        found_it = True
                        break
                if not found_it:
                    quit("file %s: %s not in file columns:\n%s" % (infile.name, args.qvalcol, reader.fieldnames))
            for row in reader:
                qval = row[args.qvalcol]
                if float(qval) < args.qvalue:
                    n_lessthan_qvalue += 1
                n_total += 1
        print("%s\t%d" % (infile.name, n_lessthan_qvalue))


start_time = datetime.now()
logger.debug("Start time: %s" % start_time)
main()
logger.debug("End time: %s" % datetime.now())
logger.debug("Elapsed time: %s" % (datetime.now() - start_time))
