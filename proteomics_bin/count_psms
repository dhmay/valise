#!/usr/bin/env python
"""
Count the PSMs with q<0.01.

There's some nasty hardcoded junk in here for counting up IDs by different protein databases,
as deduced by protein name prefixes.
"""

import argparse
import logging
from datetime import datetime
import csv

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)

DEFAULT_MAX_QVALUE = 0.01
DEFAULT_QVALUE_COLNAME = "percolator q-value"
DEFAULT_PROTEINID_COLNAME = "protein id"


def main():

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infiles', type=argparse.FileType('r'), nargs='+',
                        help='input file(s)')
    parser.add_argument('--qvalcol', default=DEFAULT_QVALUE_COLNAME, help='name of the q-value column')
    parser.add_argument('--byfasta', action="store_true", help='Give counts of PSMs')
    parser.add_argument('--protidcol', help='name of the protein ID column')
    parser.add_argument('--qvalue', default=DEFAULT_MAX_QVALUE, type=float, help='q-value cutoff')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO, 
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    if args.protidcol:
        print("file\ttotal\tplasmo\thuman\tcrap\tunknown")
    else:
        print("file\ttotal")
    for infile in args.infiles:
        reader = csv.DictReader(infile, delimiter='\t')
        n_lessthan_qvalue = 0
        n_plasmo_lessthan_qvalue = 0
        n_human_lessthan_qvalue = 0
        n_crap_lessthan_qvalue = 0
        n_unknown_lessthan_qvalue = 0
        n_total = 0
        if not args.qvalcol in reader.fieldnames:
            quit("%s not in file columns:\n%s" % (args.qvalcol, reader.fieldnames))
        for row in reader:
            qval = row[args.qvalcol]
            if float(qval) < args.qvalue:
                n_lessthan_qvalue += 1
                if args.protidcol and args.byfasta:
                    protein = row[args.protidcol]
                    if 'GPMCRAP' in protein:
                        n_crap_lessthan_qvalue += 1
                    elif 'HUMAN' in protein:
                        n_human_lessthan_qvalue += 1
                    elif 'PF' in protein:
                        n_plasmo_lessthan_qvalue += 1
                    else:
                        n_unknown_lessthan_qvalue += 1
            n_total += 1
        if args.protidcol and args.byfasta:
            outchunks = [infile.name, str(n_lessthan_qvalue), str(n_plasmo_lessthan_qvalue),
                         str(n_human_lessthan_qvalue),
                         str(n_crap_lessthan_qvalue), str(n_unknown_lessthan_qvalue)]
            print("\t".join(outchunks))
        else:
            print("%s\t%d" % (infile.name, n_lessthan_qvalue))


start_time = datetime.now()
logger.debug("Start time: %s" % start_time)
main()
logger.debug("End time: %s" % datetime.now())
logger.debug("Elapsed time: %s" % (datetime.now() - start_time))
