#!/usr/bin/env python
"""
Create an ROC-like line-plot of FDR (X axis) vs. count of identified peptides.
"""

import argparse
import logging
from datetime import datetime
import csv
from pyvalise.util import charts

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def declare_gather_args():
    """
    Declare all arguments, parse them, and return the args dict.
    Does no validation beyond the implicit validation done by argparse.
    return: a dict mapping arg names to values
    """

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infiles', type=argparse.FileType('r'),
                        help='input file(s)', nargs='+')
    parser.add_argument('--fdrcol', help='column name with FDR values',
                        default='percolator q-value')
    parser.add_argument('--maxfdr', help='max FDR to plot', type=float,
                        default=0.5)
    parser.add_argument('--fdrforcount', help='FDR at which to report counts', type=float,
                        default=0.01)
    parser.add_argument('--title', help='chart title',
                        default='FDR vs. ID count')
    parser.add_argument('--labels', help='labels for each file')
    parser.add_argument('--outpdf', required=True, type=argparse.FileType('w'),
                        help='output chart')
    parser.add_argument('--hidelegend', action="store_true", help='hide the legend')

    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    return parser.parse_args()


def main():
    args = declare_gather_args()
    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    script_start_time = datetime.now()
    logger.debug("Start time: %s" % script_start_time)

    labels = None
    if len(args.infiles) > 1 and not args.hidelegend:
        if args.labels:
            labels = args.labels.split(',')
            assert(len(labels) == len(args.infiles))
        else:
            labels = [infile.name for infile in args.infiles]

    counts_at_cutoff = []
    xvalses = []
    yvalses = []
    for infile in args.infiles:
        print("Processing %s" % infile.name)
        reader = csv.DictReader(infile, delimiter='\t')
        assert(args.fdrcol in reader.fieldnames)
        fdrs_asc = [float(row[args.fdrcol]) for row in reader]
        fdrs_asc.sort()

        xvalues = [0]
        yvalues = [0]

        prev_fdr = 0
        prev_count = 0
        for i in xrange(0, len(fdrs_asc)):
            fdr = fdrs_asc[i]
            if fdr > args.maxfdr:
                prev_fdr = fdr
                break
            if fdr > prev_fdr:
                xvalues.extend([prev_fdr, fdr])
                yvalues.extend([prev_count, i])
                prev_fdr = fdr
                prev_count = i
        if prev_fdr < args.maxfdr:
            last_fdr = fdrs_asc[len(fdrs_asc) - 1]
            if last_fdr < args.maxfdr:
                xvalues.extend([prev_fdr, last_fdr])
                yvalues.extend([prev_count, len(fdrs_asc)])
        xvalses.append(xvalues)
        yvalses.append(yvalues)
        count_atcutoff = 0
        for i in xrange(0, len(xvalues)):
            if xvalues[i] < args.fdrforcount:
                count_atcutoff = yvalues[i]
            else:
                break
        counts_at_cutoff.append(count_atcutoff)
    print("Counts at %f" % args. fdrforcount)
    for i in xrange(0, len(counts_at_cutoff)):
        print('\t'.join([labels[i], str(counts_at_cutoff[i])]))

    mycharts = [charts.multiline(xvalses, yvalses, title=args.title,
                                 xlabel='FDR', ylabel='ID count',
                                 labels=labels)]
    charts.write_pdf(mycharts, args.outpdf)

    logger.debug("End time: %s. Elapsed time: %s" % (datetime.now(), datetime.now() - script_start_time))


main()
