#!/usr/bin/env python
"""
scatterplot two spreadsheet columns against each other
"""

import argparse
import logging
from datetime import datetime
import csv
import math
import numpy as np
from pyvalise.util import charts

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)

DEFAULT_LOG_BASE = charts.DEFAULT_LOG_BASE

def main():
    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input spreadsheet file')
    parser.add_argument('column1', help='column name')
    parser.add_argument('column2', help='column name')
    parser.add_argument('--colorcolumn',
                        help='column to use for colors of the dots (should be numeric, 0 to %d)' %
                        len(charts.BASE_COLORS))
    parser.add_argument('--pointsize', type=int, help='point size', default=charts.DEFAULT_POINTSIZE)
    parser.add_argument('--outpdf', type=argparse.FileType('w'),
                        help='output PDF')
    parser.add_argument('--plotlogx', action="store_true",
                        help='log-transform values from first column?')
    parser.add_argument('--plotlogy', action="store_true",
                        help='log-transform values from second column?')
    parser.add_argument('--neglog10x', action="store_true",
                        help='transform values from first column as -log10?')
    parser.add_argument('--neglog10y', action="store_true",
                        help='transform values from second column as -log10?')
    parser.add_argument('--logbase', type=float, default=DEFAULT_LOG_BASE,
                        help='base for log-transformation')
    parser.add_argument('--histogram', action="store_true",
                        help='also plot a histogram of each column\'s values')
    parser.add_argument('--missingindicator', default='NA',
                        help='a value that indicates missingness')
    parser.add_argument('--hidecorrcoef', action="store_true",
                        help='hide correlation coefficient in chart?')
    parser.add_argument('--plotabline',  action="store_true", help='plot a 1:1 line?', default=False)
    parser.add_argument('--xlabel', help='label for X axis')
    parser.add_argument('--ylabel', help='label for Y axis')
    parser.add_argument('--colorlabels', help='Labels for each color, comma-separated')
    parser.add_argument('--title', help='title')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)


    xvals = []
    yvals = []
    n_xvals_plottable = 0
    n_yvals_plottable = 0
    colorvals = None
    if args.colorcolumn:
        colorvals = []
    for row in csv.DictReader(args.infile, delimiter='\t'):
        xvalstr = row[args.column1]
        yvalstr = row[args.column2]
        if xvalstr:
            n_xvals_plottable += 1
        if yvalstr:
            n_yvals_plottable += 1
        if xvalstr and yvalstr and xvalstr != args.missingindicator and yvalstr != args.missingindicator:
            xval = float(xvalstr)
            yval = float(yvalstr)
            if args.neglog10x:
                xval = -math.log(xval, 10)
            if args.neglog10y:
                yval = -math.log(yval, 10)
            xvals.append(xval)
            yvals.append(yval)
            if args.colorcolumn:
                colorvals.append(float(row[args.colorcolumn]))
    mycharts = []
    if args.outpdf:
        print("Building charts...")
        col1fortitle = args.column1
        col2fortitle = args.column2
        if args.neglog10x:
            col1fortitle = "-log10(" + args.column1 + ")"
        if args.neglog10y:
            col2fortitle = "-log10(" + args.column2 + ")"
        title = col1fortitle + " vs. " + col2fortitle
        xy_cor = np.corrcoef(xvals, yvals)[0, 1]
        print("r=%f. in 1: %d; in 2: %d; comparable: %d" %
              (xy_cor, n_xvals_plottable, n_yvals_plottable, len(xvals)))
        if not args.hidecorrcoef:
            title = title + " (r=" + ("%.3f" % xy_cor) + ")"
        if args.title is not None:
            title = args.title
        xlabel = args.column1
        if args.xlabel:
            xlabel = args.xlabel
        ylabel = args.column2
        if args.ylabel:
            ylabel = args.ylabel
        if args.colorcolumn:
            if args.colorlabels:
                labels = args.colorlabels.split(',')
                color_xvals_map = dict()
                color_yvals_map = dict()
                for i in xrange(0, len(xvals)):
                    color = colorvals[i]
                    if color not in color_xvals_map:
                        color_xvals_map[color] = []
                        color_yvals_map[color] = []
                    color_xvals_map[color].append(xvals[i])
                    color_yvals_map[color].append(yvals[i])
                xvalses = [color_xvals_map[color] for color in color_xvals_map]
                yvalses = [color_yvals_map[color] for color in color_xvals_map]
                mycharts.append(charts.multiscatter(xvalses, yvalses, title=title,
                                                   xlabel=xlabel,
                                                   ylabel=ylabel,
                                                   should_logx=args.plotlogx,
                                                   should_logy=args.plotlogy,
                                                   log_base=args.logbase,
                                                   colors=charts.BASE_COLORS,
                                                   draw_1to1=args.plotabline,
                                                   pointsize=args.pointsize,
                                                   labels=labels))
            else:
                max_colorval = max(colorvals)
                min_colorval = min(colorvals)
                colors = [(colorvals[i] - min_colorval) / (max_colorval - min_colorval) for i in xrange(0, len(colorvals))]
                mycharts.append(charts.scatterplot(xvals, yvals, title=title,
                                                   xlabel=xlabel,
                                                   ylabel=ylabel,
                                                   should_logx=args.plotlogx,
                                                   should_logy=args.plotlogy,
                                                   log_base=args.logbase,
                                                   colors=colors,
                                                   cmap=charts.COLORMAP_REDBLUE,
                                                   draw_1to1=args.plotabline,
                                                   pointsize=args.pointsize))

        else:
            mycharts.append(charts.scatterplot(xvals, yvals, title=title,
                                               xlabel=xlabel,
                                               ylabel=ylabel,
                                               should_logx=args.plotlogx,
                                               should_logy=args.plotlogy,
                                               log_base=args.logbase,
                                               colors=colorvals,
                                               cmap=charts.COLORMAP_BASECOLORS,
                                               draw_1to1=args.plotabline,
                                               pointsize=args.pointsize))
        if args.histogram:
            mycharts.append(charts.hist(xvals, title=args.column1))
            mycharts.append(charts.hist(yvals, title=args.column2))
        charts.write_pdf(mycharts, args.outpdf)
        print("Wrote charts to %s" % args.outpdf.name)

    print("Done.")


start_time = datetime.now()
main()
end_time = datetime.now() - start_time

logger.debug("Execution time: %s" % end_time)
