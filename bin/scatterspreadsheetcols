#!/usr/bin/env python
"""
scatterplot two spreadsheet columns against each other
"""

import argparse
import logging
from datetime import datetime
import csv
import math
import os
import numpy as np
from pyvalise.util import charts

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def main():
    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input spreadsheet file')
    parser.add_argument('column1', help='column name')
    parser.add_argument('column2', help='column name')
    parser.add_argument('--outpdf', type=argparse.FileType('w'),
                        help='output PDF')
    parser.add_argument('--plotlog1', action="store_true",
                        help='log-transform values from first column?')
    parser.add_argument('--plotlog2', action="store_true",
                        help='log-transform values from second column?')
    parser.add_argument('--neglog101', action="store_true",
                        help='transform values from first column as -log10?')
    parser.add_argument('--neglog102', action="store_true",
                        help='transform values from second column as -log10?')
    parser.add_argument('--histogram', action="store_true",
                        help='also plot a histogram of each column\'s values')
    parser.add_argument('--missingindicator', default='NA',
                        help='a value that indicates missingness')
    parser.add_argument('--hidecorrcoef', action="store_true",
                        help='hide correlation coefficient in chart?')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)


    xvals = []
    yvals = []
    n_xvals_plottable = 0
    n_yvals_plottable = 0
    for row in csv.DictReader(args.infile, delimiter='\t'):
        xvalstr = row[args.column1]
        yvalstr = row[args.column2]
        if xvalstr:
            n_xvals_plottable += 1
        if yvalstr:
            n_yvals_plottable += 1
        if xvalstr and yvalstr and xvalstr != args.missingindicator and yvalstr != args.missingindicator:
            xval = float(xvalstr)
            yval = float(yvalstr)
            if args.plotlog1:
                xval = math.log(xval)
            elif args.neglog101:
                xval = -math.log(xval, 10)
            if args.plotlog2:
                yval = math.log(yval)
            elif args.neglog102:
                yval = -math.log(yval, 10)
            xvals.append(xval)
            yvals.append(yval)
    mycharts = []
    if args.outpdf:
        print("Building charts...")
        col1fortitle = args.column1
        col2fortitle = args.column2
        if args.plotlog1:
            col1fortitle = "ln(" + args.column1 + ")"
        elif args.neglog101:
            col1fortitle = "-log10(" + args.column1 + ")"
        if args.plotlog2:
            col2fortitle = "ln(" + args.column2 + ")"
        elif args.neglog102:
            col2fortitle = "-log10(" + args.column2 + ")"
        title = col1fortitle + " vs. " + col2fortitle
        xy_cor = np.corrcoef(xvals, yvals)[0, 1]
        print("r=%f. in 1: %d; in 2: %d; comparable: %d" %
              (xy_cor, n_xvals_plottable, n_yvals_plottable, len(xvals)))
        if not args.hidecorrcoef:
            title = title + " (r=" + ("%.3f" % xy_cor) + ")"
        mycharts.append(charts.scatterplot(xvals, yvals, title=title,
                                           xlabel=args.column1,
                                           ylabel=args.column2))
        if args.histogram:
            mycharts.append(charts.hist(xvals, title=args.column1))
            mycharts.append(charts.hist(yvals, title=args.column2))
        charts.write_pdf(mycharts, args.outpdf)
        print("Wrote charts to %s" % args.outpdf.name)

    print("Done.")


start_time = datetime.now()
main()
end_time = datetime.now() - start_time

logger.debug("Execution time: %s" % end_time)
