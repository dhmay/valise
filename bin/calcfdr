#!/usr/bin/env python
"""
Calculate FDR, based on some float score column and some column indicating decoys with a prefix.
Add an FDR column to the file in the output, and keep only targets in the output.
Does not do target-decoy competition. Dead simple.
"""

import argparse
import logging
from datetime import datetime
import csv

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def declare_gather_args():
    """
    Declare all arguments, parse them, and return the args dict.
    Does no validation beyond the implicit validation done by argparse.
    return: a dict mapping arg names to values
    """

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input file')
    parser.add_argument('out', type=argparse.FileType('w'),
                        help='output file')
    parser.add_argument('--higherisbetter', action="store_true", help='higher score is better')
    parser.add_argument('--lowerisbetter', action="store_true", help='lower score is better')
    parser.add_argument('--scorecol', required=True, help='Score column name')
    parser.add_argument('--targetdecoycol', required=True,
                        help='Name of column in which target or decoy is indicated with a prefix')
    parser.add_argument('--decoyprefix', required=True, help='Decoy prefix')
    parser.add_argument('--fdrcolname', help='Name of FDR column', default='fdr')
    parser.add_argument('--reportfdr', type=float, help='FDR at which to report a count', default=0.01)
    parser.add_argument('--maxfdr', type=float, help='FDR cutoff for output', default=1)

    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    return parser.parse_args()


def main():
    args = declare_gather_args()
    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    script_start_time = datetime.now()
    logger.debug("Start time: %s" % script_start_time)

    if args.higherisbetter == args.lowerisbetter:
        quit("Must specify higherisbetter or lowerisbetter, but not both.")
    higher_is_better = args.higherisbetter

    reader = csv.DictReader(args.infile, delimiter='\t')
    rows = [row for row in reader]
    rows.sort(key=lambda row: float(row[args.scorecol]), reverse=higher_is_better)

    header_line = '\t'.join(reader.fieldnames) + '\t' + args.fdrcolname
    args.out.write(header_line + '\n')

    n_target = 0.
    n_decoy = 0.
    n_to_report = 0
    for row in rows:
        is_decoy = row[args.targetdecoycol].startswith(args.decoyprefix)
        if is_decoy:
            n_decoy += 1.
        else:
            n_target += 1.
        fdr = n_decoy / (n_target + n_decoy)
        if not is_decoy:
            if fdr <= args.reportfdr and not is_decoy:
                n_to_report += 1
            if fdr <= args.maxfdr:
                linefields = [row[colname] for colname in reader.fieldnames]
                linefields.append(str(fdr))
                args.out.write('\t'.join(linefields) + '\n')
                args.out.flush()

    print("At fdr=%f: %d" % (args.reportfdr, max(n_to_report, 0)))
    print("Targets: %d" % n_target)
    print("Decoys: %d" % n_decoy)
    print("Done.")

    logger.debug("End time: %s. Elapsed time: %s" % (datetime.now(), datetime.now() - script_start_time))


main()
