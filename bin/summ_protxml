#!/usr/bin/env python
"""Summarize protXML search results """

from pyvalise.io import protxml_io
import argparse
import logging

log = logging.getLogger(__name__)


def main():
    # digest args
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('protxml', type=argparse.FileType('r'),
                        help='input protXML file')
    parser.add_argument('--minprob', type=float, default=0.1,
                        help='Minimum ProteinProphet probability to include proteins/groups')
    parser.add_argument('--out', type=argparse.FileType('w'),
                        help='output .tsv file')
    parser.add_argument('--removenull', action="store_true", default=False,
                        help='Remove proteins whose names end with "null"? (this is the GPM "crap" designation)')
    parser.add_argument('--debug', action="store_true", default=False,
                        help='Enable debug logging')

    args = parser.parse_args()

    if args.debug:
        log.setLevel(logging.DEBUG)

    print("Evaluating protxml file...")
    colnames = ["group", "protein", "peptides", "alt_names"]
    if args.out:
	    args.out.write('\t'.join(colnames) + '\n')
    protxml_groups = protxml_io.read_protxml(args.protxml, args.minprob)
    n_proteins = 0
    n_proteingroups = 0
    for protxml_group in protxml_groups:
        group_number = protxml_group.number
        kept_this_group = False
        for protein in protxml_group.proteins:
            # skip crap proteins if specified
            should_skip = False
            if args.removenull:
                all_names = [protein.name]
                all_names.extend(protein.alt_names)
                for name in all_names:
                    if name.endswith('null'):
                        should_skip = True
                        break
            if should_skip:
                break
            kept_this_group = True
            n_proteins += 1
            peptides_str = ','.join(protein.peptide_seqs)
            alt_names_str = ','.join(protein.alt_names)
	    if args.out:
                args.out.write("\t".join([str(group_number), protein.name, peptides_str, alt_names_str]) + '\n')
        if kept_this_group:
            n_proteingroups += 1

    print("%d protein groups, %d total proteins" % (n_proteingroups, n_proteins))
    if args.out:
	    args.out.close()

main()
