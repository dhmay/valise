#!/usr/bin/env python
"""
Keep values from a specified list of .tsv columns, drop the rest
"""

import argparse
import logging
from datetime import datetime
import csv

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def main():
    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input spreadsheet file')
    parser.add_argument('columns', help='column name(s), comma-separated')
    parser.add_argument('out', type=argparse.FileType('w'),
                        help='output file')
    parser.add_argument('--keepmissing', action="store_true", help='Keep rows in which some kept values are missing')
    parser.add_argument('--removeheaders', action="store_true", help='Do not write the header row')
    parser.add_argument('--missingindicator', default='NA',
                    help='a value that indicates missingness (actual totally missing values will also be considered missing)')

    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)

    cols_to_keep = args.columns.split(',')

    reader = csv.DictReader(args.infile, delimiter='\t')

    for col in cols_to_keep:
        assert(col in reader.fieldnames)

    if not args.removeheaders:
        args.out.write('\t'.join(cols_to_keep) + '\n')

    n_rows_written = 0
    for row in reader:
        should_write = True
        vals = []
        for col in cols_to_keep:
            valstring = row[col]
            if (not args.keepmissing) and ((not valstring) or valstring == args.missingindicator):
                should_write = False
                break
            vals.append(valstring)
        if not should_write:
            continue
        n_rows_written += 1
        args.out.write('\t'.join(vals) + '\n')

    args.out.close()
    print("Done. Wrote %d rows." % n_rows_written)


start_time = datetime.now()
main()
end_time = datetime.now() - start_time

logger.debug("Execution time: %s" % end_time)
