#!/usr/bin/env python
"""
reverse a fasta.
Currently only supports whole-sequence reversal, and only supports protein fastas.
"""

import sys
import argparse
import logging
from datetime import datetime
from pyvalise.io import fasta_io
from pyvalise.proteomics import peptides

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def declare_gather_args():
    """
    Declare all arguments, parse them, and return the args dict.
    Does no validation beyond the implicit validation done by argparse.
    return: a dict mapping arg names to values
    """

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input fasta file')
    parser.add_argument('--out', type=argparse.FileType('w'), required=True,
                        help='output file')
    parser.add_argument('--prefix', default='decoy_', help='prefix for reversed sequence names')
    parser.add_argument('--append', action="store_true", help='append reversed sequences to the original database? (if not, just write reversed)')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    return parser.parse_args()


def main():
    args = declare_gather_args()
    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    script_start_time = datetime.now()
    logger.debug("Start time: %s" % script_start_time)

    peptides_extracted = set()
    n_total_proteins = 0
    if args.append:
        print("Writing original entries...")
        for record in fasta_io.load_fasta_records(args.infile):
            fasta_io.write_record_to_fasta(record, args.out)
        args.infile = open(args.infile.name)
        print("Done writing original entries.")
    for record in fasta_io.load_fasta_records(args.infile):
        n_total_proteins += 1
        if n_total_proteins % 1000000 == 0:
            logger.debug("Processed %d" % n_total_proteins)
            sys.stdout.flush()
        protseq = str(record.seq)
        fasta_io.write_protein_name_seq_to_fasta(args.prefix + record.name, protseq, args.out)
    args.out.close()
    print("Wrote file %s" % args.out.name)
    print("Original proteins: %d" % n_total_proteins)
    print("Done.")

    logger.debug("End time: %s. Elapsed time: %s" % (datetime.now(), datetime.now() - script_start_time))


main()
