#!/usr/bin/env python
"""Histogram some attribute of each read in a BAM file"""

import argparse
import logging
import pysam
import sys
from pyvalise.util import charts


__author__ = "Damon May"
__copyright__ = "Copyright (c) 2012-2014 Fred Hutchinson Cancer Research Center"
__license__ = ""
__version__ = ""

log = logging.getLogger(__name__)

attr_types = ['pos', 'alen']

def main():
    # digest args
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('bamfile', type=argparse.FileType('r'),
                        help='input BAM file')
    parser.add_argument('out', type=argparse.FileType('w'),
                        help='output chart file')
    parser.add_argument('attr', choices=attr_types, help="attribute type. pos or alen")
    parser.add_argument('--bins', type=int, default=200, help='bins for histogram')
    parser.add_argument('--maxreads', type=int, default=sys.maxsize, help='max reads to use')

    parser.add_argument('--includeunmapped', action="store_true", help='Include unmapped reads?')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')

    args = parser.parse_args()

    if args.debug:
        log.setLevel(logging.DEBUG)

    print("Include unmapped? %s" % args.includeunmapped)

    samfile = pysam.Samfile(args.bamfile.name, "rb")
    vals = []
    n = 0
    minval = sys.maxsize
    maxval = 0
    for aread in samfile.fetch(until_eof=args.includeunmapped):
        if n % 500000 == 0:
            print("Read %d reads...." % n)
        if n >= args.maxreads:
            print("Stopping early, found %d reads" % n)
            break
        n += 1
        readval = None
        if args.attr == 'alen':
            if not aread.aend:
                continue
            readval = aread.aend-aread.pos
        elif args.attr == 'pos':
            readval = aread.pos
        if readval < minval:
            minval = readval
        if readval > maxval:
            maxval = readval
        vals.append(readval)
    print("Building chart...")
    charts.write_pdf([charts.hist(vals, bins=args.bins)], args.out)
    print("Done. Min=%d, max=%d" % (minval, maxval))



main()
