#!/usr/bin/env python
"""
Extract the values from a single named column in a .tsv file
"""

import argparse
import logging
from datetime import datetime
import csv
from pyvalise.io import file_io

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def main():
    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input spreadsheet file')
    parser.add_argument('column', help='column name')
    parser.add_argument('out', type=argparse.FileType('w'),
                        help='output file')
    parser.add_argument('--keepmissing', action="store_true", help='Keep missing values')
    parser.add_argument('--missingindicator', default='NA',
                    help='a value that indicates missingness (actual totally missing values will also be considered missing)')
    parser.add_argument('--unique', action="store_true",
                        help='uniquify values (maintains order)')
    parser.add_argument('--delimiter', help='delimiter', default='\t')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)

    reader = csv.DictReader(file_io.BlankCommentCSVFile(args.infile), delimiter=args.delimiter)
    if args.column not in reader.fieldnames:
        quit("Column %s not in field names: %s" % (args.column, reader.fieldnames))
    unique_values_written = set()
    n_rows_written = 0
    for row in reader:
        valstring = row[args.column]
        if args.keepmissing or (valstring and valstring != args.missingindicator):
            if args.unique:
                if valstring in unique_values_written:
                    continue
                unique_values_written.add(valstring)
            args.out.write(valstring + '\n')
            n_rows_written += 1

    args.out.close()
    print("Done. Wrote %d rows." % n_rows_written)


start_time = datetime.now()
main()
end_time = datetime.now() - start_time

logger.debug("Execution time: %s" % end_time)
