#!/usr/bin/env python
"""Align the data from a sequencing reaction against the expected sequence"""

import argparse
import logging
from pyvalise.io import fasta_io
from pyvalise.util import align
from pyvalise.util import dna


__author__ = "Damon May"
__copyright__ = "Copyright (c) 2012-2014 Fred Hutchinson Cancer Research Center"
__license__ = ""
__version__ = ""

log = logging.getLogger(__name__)


def main():
    # digest args
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('seqfile', type=argparse.FileType('r'),
                        help='input sequence file (fasta format)')
    parser.add_argument('ref_sequence', help='reference sequence to align to')
    parser.add_argument('--revcomp', action="store_true", help='reverse-complement sequencing file sequence?')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')

    args = parser.parse_args()


    if args.debug:
        log.setLevel(logging.DEBUG)
        align.log.setLevel(logging.DEBUG)

    name_seq_map = fasta_io.load_fasta_name_sequence_map(args.seqfile)
    assert(len(name_seq_map) == 1)

    seqfile_sequence = name_seq_map.values()[0]
    if args.revcomp:
        seqfile_sequence = dna.reverse_complement(seqfile_sequence)

    alignment = align.global_align_sequences(seqfile_sequence, args.ref_sequence)

    print(align.alignment_pretty_string(alignment))

main()
