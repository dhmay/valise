#!/usr/bin/env python
"""
Filter an mzML file. This will be brittle, as it doesn't parse the XML
"""

import argparse
import logging
from datetime import datetime

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)

def getelements(filename_or_file):
    '''
    iteratively get all the elements in an XML file
    :param filename_or_file:
    :return:
    '''
    context = iter(ET.iterparse(filename_or_file, events=('start', 'end')))
    _, root = next(context) # get root element
    for event, elem in context:
        if event == 'end':
            yield elem
            root.clear() # free memory

def main():

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input file')
    parser.add_argument('out', type=argparse.FileType('w'),
                        help='output file')
    parser.add_argument('--removems1', action="store_true", help='Remove MS1 scans?')
    parser.add_argument('--filterscannumfile', type=argparse.FileType('r'),
                        help='a file with scan numbers to filter out, one per line')
    parser.add_argument('--maxspectra', type=int, default=-1,
                        help='max spectra to write. If set, will stop writing after this many scans (of any type) are written sequentially.')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO, 
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)

    scannums_to_filter = []
    if args.filterscannumfile:
        scannums_to_filter = [int(scannumstr) for scannumstr in args.filterscannumfile]
        print("Loaded %d scan numbers to filter" % len(scannums_to_filter))
    buffer_lines = []
    in_spectrum = False
    removing_spectrum = False
    current_offset = 0
    current_scannum = -1
    scan_offset_map = {}
    index_list_offset = -1
    chromatogram_offset = -1
    n_scans_removed = 0
    stopping_early = False
    while True:
        line = args.infile.readline()
        if not line:
            break
        if '<index name="spectrum"' in line:
            args.out.write(line)
            break
        if '<indexList ' in line:
            index_list_offset = current_offset
        if '<chromatogramList ' in line:
            chromatogram_offset = current_offset
        if in_spectrum:
            if "</spectrum>" in line:
                if removing_spectrum:
                    n_scans_removed += 1
                elif stopping_early:
                    None
                else:
                    buffer_lines.append(line)
                    scan_offset_map[current_scannum] = current_offset + buffer_lines[0].index("<spectrum")
                    for bufferline in buffer_lines:
                        args.out.write(bufferline)
                        current_offset += len(bufferline)
                buffer_lines = []
                in_spectrum = False
                removing_spectrum = False
                if args.maxspectra != -1 and len(scan_offset_map) >= args.maxspectra:
                    stopping_early = True
            else:
                if args.removems1:
                    if "cvParam" in line and "ms level" in line:
                        if "value=\"1\"" in line:
                            if removing_spectrum:
                                print("WARNING! scan on remove list was an MS1 scan.")
                            logger.debug("Removing MS1 scan.")
                            removing_spectrum = True
                if not removing_spectrum:
                    buffer_lines.append(line)
        else:
            if "<spectrum " in line:
                in_spectrum = True
                buffer_lines.append(line)
                scannum_curpos = line.index('scan=') + len('scan=')
                rest_of_line = line[scannum_curpos:]
                current_scannum = int(rest_of_line[:rest_of_line.index('"')])
                logger.debug("Begin spectrum %d" % current_scannum)
                if current_scannum in scannums_to_filter:
                    logger.debug("   filtering!")
                    removing_spectrum = True
            else:
                args.out.write(line)
                current_offset += len(line)
    #write the lines of the index
    for scan in sorted(scan_offset_map):
        args.out.write("      <offset idRef=\"controllerType=0 controllerNumber=1 scan=%d\">%d</offset>\n" %
                       (scan, scan_offset_map[scan]))

    args.out.write("    </index>\n")
    args.out.write("    <index name=\"chromatogram\">\n")
    args.out.write("      <offset idRef=\"TIC\">%d</offset>\n" % chromatogram_offset)
    args.out.write("    </index>\n")
    args.out.write("  </indexList>\n")
    args.out.write("<indexListOffset>%d</indexListOffset>\n" % index_list_offset)
    args.out.write("</indexedmzML>\n")
    args.out.close()
    print("Done. Removed %d scans" % n_scans_removed)

    outfiler = open(args.out.name)
    for scan in sorted(scan_offset_map):
        outfiler.seek(scan_offset_map[scan])
        print("%d\t%s" % (scan, outfiler.read(100)))


start_time = datetime.now()
logger.debug("Start time: %s" % start_time)
main()
logger.debug("End time: %s" % datetime.now())
logger.debug("Elapsed time: %s" % (datetime.now() - start_time))
