#!/usr/bin/env python
"""
scatterplot two spreadsheet columns against each other
"""

import argparse
import logging
from datetime import datetime
import csv
import math
import os
import numpy as np
from pyvalise.util import charts

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)

DEFAULT_LOG_BASE = math.e

MAX_LABEL_LEN = 20


def main():
    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input spreadsheet file')
    parser.add_argument('columnx', help='X axis column name')
    parser.add_argument('columnsy', help='Y axis column names (if empty, use all other cols)', nargs='*')
    parser.add_argument('--outpdf', type=argparse.FileType('w'),
                        help='output PDF')
    parser.add_argument('--plotlogx', action="store_true",
                        help='log-transform values for the x axis?')
    parser.add_argument('--plotlogy', action="store_true",
                        help='log-transform values for the y axis?')
    parser.add_argument('--neglog10x', action="store_true",
                        help='transform values from x axis as -log10?')
    parser.add_argument('--neglog10y', action="store_true",
                        help='transform values from y axis as -log10?')
    parser.add_argument('--logbase', type=float, default=DEFAULT_LOG_BASE,
                        help='base for log-transformation')
    parser.add_argument('--yaxislabel', default='',
                        help='y-axis label')
    parser.add_argument('--histogram', action="store_true",
                        help='also plot a histogram of each column\'s values')
    parser.add_argument('--missingindicator', default='NA',
                        help='a value that indicates missingness')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)

    dictreader = csv.DictReader(args.infile, delimiter='\t')
    logger.debug("Columns: %s" % dictreader.fieldnames)
    if not args.columnsy:
        args.columnsy = dictreader.fieldnames[:]
        args.columnsy.remove(args.columnx)

    xvals = []
    yvalses = []
    for _ in xrange(0, len(args.columnsy)):
        yvalses.append(list())
    rows_byxval = [row for row in dictreader]
    print(rows_byxval)
    rows_byxval.sort(key=lambda x: float(x[args.columnx]))
    print(rows_byxval)
    for row in rows_byxval:
        logger.debug("Row: keys=%s" % row.keys())
        xvalstr = row[args.columnx]
        if xvalstr and xvalstr != args.missingindicator:
            xval = float(xvalstr)
            if args.neglog10x:
                xval = -math.log(xval, 10)
            xvals.append(xval)
            for i in xrange(0, len(args.columnsy)):
                ycol = args.columnsy[i]
                yvalstr = row[ycol]
                yval = None
                if yvalstr and yvalstr != args.missingindicator:
                    yval = float(yvalstr)
                yvalses[i].append(yval)
    mycharts = []
    columnsy_for_labels = args.columnsy[:]
    for i in xrange(0, len(columnsy_for_labels)):
        columnsy_for_labels[i] = columnsy_for_labels[i][0:min(MAX_LABEL_LEN, len(columnsy_for_labels[i]))]
    if args.outpdf:
        print("Building charts...")
        colxfortitle = args.columnx
        xvalses = [xvals] * len(args.columnsy)
        mycharts.append(charts.multiline(xvalses, yvalses, title="",
                                         xlabel=colxfortitle, ylabel=args.yaxislabel,
                                         labels=columnsy_for_labels, should_logx=args.plotlogx,
                                         should_logy=args.plotlogy, log_base=args.logbase))
        if args.histogram:
            mycharts.append(charts.hist(xvals, title=args.columnx))
            for i in xrange(0, len(args.columnsy)):
                ycol = args.columnsy[i]
                mycharts.append(charts.hist(yvalses[i], title=ycol))
        charts.write_pdf(mycharts, args.outpdf)
        print("Wrote charts to %s" % args.outpdf.name)
    print("Done.")


start_time = datetime.now()
main()
end_time = datetime.now() - start_time

logger.debug("Execution time: %s" % end_time)
