#!/usr/bin/env python
"""
Histogram the values from a spreadsheet column
"""

import argparse
import logging
from datetime import datetime
import csv
import math
import os
import numpy as np
from pyvalise.util import charts

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def main():
    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input spreadsheet file')
    parser.add_argument('--outpdf', type=argparse.FileType('w'),
                        help='output PDF')
    parser.add_argument('--columns', help='column to histogram (if not supplied, all possible columns')
    parser.add_argument('--plotlog', action="store_true",
                        help='log-transform values?')
    parser.add_argument('--missingindicator', default='NA',
                        help='a value that indicates missingness')
    parser.add_argument('--bins', type=int, default=charts.DEFAULT_HIST_BINS, help='Number of bins')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)

    reader = csv.DictReader(args.infile, delimiter='\t')

    columns = []
    if args.columns:
        columns = args.columns.split(',')
        for column in columns:
            assert(column in reader.fieldnames)
    else:
        print("No named columns specified. Using all columns:")
        columns = reader.fieldnames
        print(",".join(columns))
    col_values_map = {}
    for column in columns:
        col_values_map[column] = []
    cols_to_remove = set()
    for row in reader:
        for column in columns:
            if column not in cols_to_remove:
                valstring = row[column]
                if valstring and valstring != args.missingindicator:
                    try:
                        col_values_map[column].append(float(valstring))
                    except ValueError:
                        print("Found non-float value for %s" % column)
                        cols_to_remove.add(column)

    for column in cols_to_remove:
        del col_values_map[column]
    for column in col_values_map:
        print("Values of %s: %d" % (column, len(col_values_map[column])))

    if args.outpdf:
        mycharts = []
        for column in col_values_map:
            values = col_values_map[column]
            if not values:
                continue
            if args.plotlog:
                values = [math.log(value) for value in values]
            mycharts.append(charts.hist(values, title=column, bins=args.bins))
            print("Making histogram for column %s with %d values" % (column, len(values)))
        charts.write_pdf(mycharts, args.outpdf)
        print("Wrote %d charts to %s" % (len(mycharts), args.outpdf.name))


start_time = datetime.now()
main()
end_time = datetime.now() - start_time

logger.debug("Execution time: %s" % end_time)
