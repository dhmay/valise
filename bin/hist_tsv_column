#!/usr/bin/env python
"""
Histogram the values from a spreadsheet column
"""

import argparse
import logging
from datetime import datetime
import csv
import math
import os
import numpy as np
from pyvalise.util import charts

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def main():
    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input spreadsheet file')
    parser.add_argument('column', help='column histogram')
    parser.add_argument('outpdf', type=argparse.FileType('w'),
                        help='output PDF')
    parser.add_argument('--plotlog', action="store_true",
                        help='log-transform values?')
    parser.add_argument('--missingindicator', default='NA',
                        help='a value that indicates missingness')
    parser.add_argument('--bins', type=int, default=charts.DEFAULT_HIST_BINS, help='Number of bins')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)

    reader = csv.DictReader(args.infile, delimiter='\t')
    assert(args.column in reader.fieldnames)
    values = []
    for row in reader:
        valstring = row[args.column]
        if valstring and valstring != args.missingindicator:
            values.append(float(valstring))
    print("Values of %s: %d" % (args.column, len(values)))

    if args.plotlog:
        values = [math.log(value) for value in values]
    mycharts = [charts.hist(values, args.column, bins=args.bins)]
    charts.write_pdf(mycharts, args.outpdf)
    print("Wrote charts to %s" % args.outpdf.name)


start_time = datetime.now()
main()
end_time = datetime.now() - start_time

logger.debug("Execution time: %s" % end_time)
