#!/usr/bin/env python
"""
Compare two sets, provided as two text files with one value per line
"""

import argparse
import logging
from datetime import datetime

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)

comparison_types = ['union', 'intersection', 'unique1', 'unique2']

def main():

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('comparisontype', help='type of comparison (%s)' % comparison_types)
    parser.add_argument('infile1', type=argparse.FileType('r'),
                        help='input file1')
    parser.add_argument('infile2', type=argparse.FileType('r'),
                        help='input file1')

    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO, 
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    set1 = set([line.strip() for line in args.infile1])
    set2 = set([line.strip() for line in args.infile2])

    output_set = None
    if args.comparisontype == 'intersect':
        output_set = set1.intersection(set2)
    elif args.comparisontype == 'union':
        output_set = set1.union(set2)
    elif args.comparisontype == 'unique1':
        set1.difference_update(set2)
        output_set = set1
    elif args.comparisontype == 'unique2':
        set2.difference_update(set1)
        output_set = set2
    else:
        quit("Invalid comparisontype %s. Quitting." % args.comparisontype)
    for output in output_set:
        print(output)

start_time = datetime.now()
logger.debug("Start time: %s" % start_time)
main()
logger.debug("End time: %s" % datetime.now())
logger.debug("Elapsed time: %s" % (datetime.now() - start_time))
