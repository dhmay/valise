#!/usr/bin/env python
"""
Sort a .tsv file by a column
"""

import argparse
import logging
from datetime import datetime
import csv
import math
import os
import numpy as np
from pyvalise.util import charts

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def main():
    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input spreadsheet file')
    parser.add_argument('column', help='column')
    parser.add_argument('out', type=argparse.FileType('w'),
                        help='output file')
    parser.add_argument('--missingindicator', default='NA',
                        help='a value that indicates missingness (actual totally missing values will also be considered missing)')
    parser.add_argument('--descending', action="store_true", help='Sort descending (default ascending)')
    parser.add_argument('--keepmissing', action="store_true", help='Keep missing values, putting them at the end (by default, strip missing values)')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)

    reader = csv.DictReader(args.infile, delimiter='\t')
    assert(args.column in reader.fieldnames)
    rows_with_value = []
    rows_without_value = []
    for row in reader:
        valstring = row[args.column]
        if valstring and valstring != args.missingindicator:
            rows_with_value.append(row)
        else:
            rows_without_value.append(row)
    print("Rows with a value for %s: %d of %d" % (args.column, len(rows_with_value), len(rows_without_value)))

    rows_with_value.sort(key=lambda row: float(row[args.column]), reverse=args.descending)
    args.out.write('\t'.join(reader.fieldnames) + '\n')
    n_rows_written = 0
    for row in rows_with_value:
        args.out.write('\t'.join([row[fieldname] for fieldname in reader.fieldnames]) + '\n')
        n_rows_written += 1
    if args.keepmissing:
        for row in rows_without_value:
            args.out.write('\t'.join([row[fieldname] for fieldname in reader.fieldnames]) + '\n')
            n_rows_written += 1
    args.out.close()
    print("Done. Wrote %d rows." % n_rows_written)


start_time = datetime.now()
main()
end_time = datetime.now() - start_time

logger.debug("Execution time: %s" % end_time)
