#!/usr/bin/env python
"""
Sort a .tsv file by a column
"""

import argparse
import logging
from datetime import datetime
import csv

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def main():
    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input spreadsheet file')
    parser.add_argument('column', help='column')
    parser.add_argument('--maxvalue', type=float, help='maximum value')
    parser.add_argument('--minvalue', type=float, help='minimum value')
    parser.add_argument('out', type=argparse.FileType('w'),
                        help='output file')
    parser.add_argument('--missingindicator', default='NA',
                        help='a value that indicates missingness (actual totally missing values will also be considered missing)')
    parser.add_argument('--descending', action="store_true", help='Sort descending (default ascending)')
    parser.add_argument('--keepmissing', action="store_true",
                        help='Keep missing values, putting them at the end (by default, strip missing values)')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)

    if (args.minvalue and args.maxvalue) or (not args.minvalue and not args.maxvalue):
        quit("Exactly one of {minvalue, maxvalue} must be supplied")

    #if true, cutoff is a min. Otherwise, is a max
    is_minvalue = not args.maxvalue

    reader = csv.DictReader(args.infile, delimiter='\t')
    assert(args.column in reader.fieldnames)
    n_written = 0
    n_total = 0
    args.out.write('\t'.join(reader.fieldnames) + '\n')
    for row in reader:
        n_total += 1
        valstring = row[args.column]
        should_write = False
        if valstring and valstring != args.missingindicator:
            if is_minvalue and float(valstring) >= args.minvalue:
                should_write = True
            elif not is_minvalue and float(valstring) <= args.maxvalue:
                should_write = True
        else:
            if args.keepmissing:
                should_write = True
        if should_write:
            n_written += 1
            args.out.write('\t'.join([row[fieldname] for fieldname in reader.fieldnames]) + '\n')

    print("Done. Wrote %d of %d rows." % (n_written, n_total))


start_time = datetime.now()
main()
end_time = datetime.now() - start_time

logger.debug("Execution time: %s" % end_time)
