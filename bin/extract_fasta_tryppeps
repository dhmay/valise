#!/usr/bin/env python
"""
extract tryptic peptides from a fasta with <= specified missed cleavages
"""

import sys
import argparse
import logging
from datetime import datetime
from pyvalise.io import fasta_io
from pyvalise.proteomics import peptides

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def declare_gather_args():
    """
    Declare all arguments, parse them, and return the args dict.
    Does no validation beyond the implicit validation done by argparse.
    return: a dict mapping arg names to values
    """

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input fasta file')
    parser.add_argument('--maxmissedcleavages', type=int, default=0,
                        help='max missed cleavages')
    parser.add_argument('--minlength', type=int, default=6,
                        help='min peptide length')
    parser.add_argument('--maxlength', type=int, default=50,
                        help='max peptide length')
    parser.add_argument('--out', type=argparse.FileType('w'),
                        help='output file')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    return parser.parse_args()


def main():
    args = declare_gather_args()
    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    script_start_time = datetime.now()
    logger.debug("Start time: %s" % script_start_time)

    peptides_extracted = set()
    n_total_proteins = 0
    for record in fasta_io.load_fasta_records(args.infile):
        n_total_proteins += 1
        if n_total_proteins % 1000000 == 0:
            logger.debug("Processed %d" % n_total_proteins)
            sys.stdout.flush()
        protseq = str(record.seq)
        if protseq.endswith("*"):
            protseq = protseq[:-1]
        for tryppep in peptides.calc_tryptic_peptides(protseq,
                                                      args.maxmissedcleavages):
            if args.minlength <= len(tryppep) <= args.maxlength:
                if tryppep not in peptides_extracted:
                    args.out.write(tryppep + "\n")
                    peptides_extracted.add(tryppep)
    if args.out:
        args.out.close()
        print("Wrote file %s" % args.out.name)
    print("Proteins: %d" % n_total_proteins)
    print("Peptides: %d" % len(peptides_extracted))
    print("Done.")

    logger.debug("End time: %s. Elapsed time: %s" % (datetime.now(), datetime.now() - script_start_time))


main()
