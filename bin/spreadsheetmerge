#!/usr/bin/env python
"""
a script to merge two spreadsheets based on a single column and maybe plot or summarize the results
"""

import argparse
import logging
from datetime import datetime
from pyvalise.io import csv_io
import math
import os
import numpy as np
from scipy.stats import mstats
import csv

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def main():
    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile1', type=argparse.FileType('r'),
                        help='input spreadsheet file 1')
    parser.add_argument('infile2', type=argparse.FileType('r'),
                        help='input spreadsheet file 2')
    parser.add_argument('--mergecolumn', required=True, help='column to merge on')
    parser.add_argument('--mergecolumn2', help='column to merge on, as named in file 2 (if not same as file 1)')
    parser.add_argument('--agreecolumn', help='column to summarize agreement for')
    parser.add_argument('--plotcolumns', help='columns to plot and/or write (comma-separated)')
    parser.add_argument('--annotcolumns', help='columns for annotated spreadsheet --outannottsv (comma-separated)')
    parser.add_argument('--outpdf', type=argparse.FileType('w'), help='output PDF')
    parser.add_argument('--outplottsv', type=argparse.FileType('w'),
                        help='output .tsv with plotcolumns for each file (only valid for just one plotcolumn)')
    parser.add_argument('--outannottsv', type=argparse.FileType('w'),
                        help='output .tsv with annotcolumns from second file where present')
    parser.add_argument('--plotlog', action="store_true",
                        help='log-transform values?')
    parser.add_argument('--plotxlabel',  help='x label for plot')
    parser.add_argument('--plotylabel',  help='y label for plot')
    parser.add_argument('--plotdotsize',  type=int, default=2, help='dot size for scatterplots')
    parser.add_argument('--plotabline',  action="store_true", help='plot a 1:1 line?', default=False)
    parser.add_argument('--plotneglog10', action="store_true",
                        help='transform values as negative log10?')
    parser.add_argument('--missingindicator', default='NA',
                        help='a value that indicates missingness')
    parser.add_argument('--hidecorrcoef', action="store_true",
                        help='hide correlation coefficient in chart?')
    parser.add_argument('--delimiter', default='\t', help='delimiter between columns')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)

    file1_fieldnames = csv.DictReader(args.infile1, delimiter=args.delimiter).fieldnames
    args.infile1 = file(args.infile1.name)
    valrowmap1 = csv_io.load_csv_rowmap_by_col(args.infile1, args.mergecolumn, missing_indicator=args.missingindicator,
                                               delimiter=args.delimiter)
    print("Values of %s in file %s: %d" % (args.mergecolumn, args.infile1.name, len(valrowmap1)))
    mergecolumn2 = args.mergecolumn
    if args.mergecolumn2:
        mergecolumn2 = args.mergecolumn2
    valrowmap2 = csv_io.load_csv_rowmap_by_col(args.infile2, mergecolumn2, missing_indicator=args.missingindicator,
                                               delimiter=args.delimiter)
    print("Values of %s in file %s: %d" % (mergecolumn2, args.infile2.name, len(valrowmap2)))

    plotcolumns = None
    if args.outpdf:
        from pyvalise.util import charts
        if args.debug:
            charts.logger.setLevel(logging.DEBUG)
        assert (args.plotcolumns is not None)

    if args.plotcolumns:
        plotcolumns = args.plotcolumns.split(',')
    if args.outplottsv and len(plotcolumns) != 1:
        quit("only one plotcolumn allowed with args.outplottsv")

    annotcolumns = None
    if args.annotcolumns:
        annotcolumns = args.annotcolumns.split(',')
        assert(args.outannottsv)
    if args.outannottsv:
        assert(args.annotcolumns)

    common_colvals = list(set(valrowmap1.keys()).intersection(set(valrowmap2.keys())))
    print("Values of %s in common: %d" % (args.mergecolumn, len(common_colvals)))

    rows1_inorder = [valrowmap1[colval] for colval in common_colvals]
    rows2_inorder = [valrowmap2[colval] for colval in common_colvals]

    if args.agreecolumn:
        n_agree = 0
        n_disagree = 0
        for i in xrange(0, len(rows1_inorder)):
            if rows1_inorder[i][args.agreecolumn] == rows2_inorder[i][args.agreecolumn]:
                n_agree += 1
            else:
                n_disagree += 1
                logger.debug("Disagree! %s, %s" % (rows1_inorder[i][args.agreecolumn], rows2_inorder[i][args.agreecolumn]))
        print("Agreement of column %s: %d yes, %d no." % (args.agreecolumn, n_agree, n_disagree))

    if plotcolumns:
        for plotcolumn in plotcolumns:
            print("Column %s" % plotcolumn)
            vals1 = []
            vals2 = []
            for i in xrange(0, len(rows1_inorder)):
                xvalstr = rows1_inorder[i][plotcolumn]
                yvalstr = rows2_inorder[i][plotcolumn]
                if xvalstr and yvalstr:
                    vals1.append(float(xvalstr))
                    vals2.append(float(yvalstr))
            if not vals1:
                print("   no common values.")
                continue
            try:
                ratios_1_2 = [vals1[i] / vals2[i] for i in xrange(0, len(vals1))]
                geomean_1_2 = mstats.gmean(ratios_1_2)
                print("    Geom mean ratio 1:2 = %f" % geomean_1_2)
                print("    Geom mean ratio 2:1 = %f" % (1.0 / geomean_1_2))
            except Exception as e:
                print("Failed to calculate ratios. Probably div by 0.")
                print(str(e))

    if args.outplottsv:
        plotcolumn = plotcolumns[0]
        args.outplottsv.write('\t'.join([args.mergecolumn, plotcolumn + '_1', plotcolumn + '_2']) + '\n')
        for i in xrange(0, len(rows1_inorder)):
            xvalstr = rows1_inorder[i][plotcolumn]
            yvalstr = rows2_inorder[i][plotcolumn]
            args.outplottsv.write('\t'.join([rows1_inorder[i][args.mergecolumn], xvalstr, yvalstr]) + '\n')
        args.outplottsv.close()

    if args.outannottsv:
        print("Writing annotation file...")
        annotfile_columns = file1_fieldnames[:]
        for annotcolumn in annotcolumns:
            if annotcolumn in annotfile_columns:
                quit("Error! Annot column %s is present in original file. Quitting." % annotcolumn)
            annotfile_columns.append(annotcolumn)
        args.outannottsv.write(args.delimiter.join(annotfile_columns) + '\n')
        for i in xrange(0, len(rows1_inorder)):
            row_values = [rows1_inorder[i][col] for col in file1_fieldnames]
            for j in xrange(0, len(row_values)):
                if row_values[j] is None:
                    row_values[j] = ''
            for annotcolumn in annotcolumns:
                val = ''
                if rows2_inorder[i][annotcolumn] and rows2_inorder[i][annotcolumn] != args.missingindicator:
                    val = rows2_inorder[i][annotcolumn]
                row_values.append(val)
            args.outannottsv.write(args.delimiter.join(row_values) + '\n')
        args.outannottsv.close()
        print("Wrote annotation file %s" % args.outannottsv.name)

    if args.outpdf:
        print("Building charts...")
        mycharts = []
        for plotcolumn in plotcolumns:
            xvals = []
            yvals = []
            n_xvals_plottable = 0
            n_yvals_plottable = 0
            for i in xrange(0, len(rows1_inorder)):
                xvalstr = rows1_inorder[i][plotcolumn]
                yvalstr = rows2_inorder[i][plotcolumn]
                if xvalstr:
                    n_xvals_plottable += 1
                if yvalstr:
                    n_yvals_plottable += 1
                if xvalstr and yvalstr:
                    xval = float(xvalstr)
                    yval = float(yvalstr)
                    if args.plotlog:
                        xval = math.log(xval)
                        yval = math.log(yval)
                    elif args.plotneglog10:
                        xval = -math.log(xval, 10)
                        yval = -math.log(yval, 10)

                    xvals.append(xval)
                    yvals.append(yval)
            title = plotcolumn
            xy_cor = np.corrcoef(xvals, yvals)[0, 1]
            print("    %s, r=%f. in 1: %d; in 2: %d; comparable: %d" %
                  (plotcolumn, xy_cor, n_xvals_plottable, n_yvals_plottable, len(xvals)))
            if args.plotlog:
                title = "ln(" + title + ")"
            if not args.hidecorrcoef:
                title = title + " (r=" + ("%.3f" % xy_cor) + ")"

            xlabel=os.path.basename(args.infile1.name)
            if args.plotxlabel:
                xlabel=args.plotxlabel
            ylabel=os.path.basename(args.infile2.name)
            if args.plotylabel:
                ylabel=args.plotylabel
            mycharts.append(charts.scatterplot(xvals, yvals, title=title, xlabel=xlabel, ylabel=ylabel,
                                               draw_1to1=args.plotabline, pointsize=args.plotdotsize))
        charts.write_pdf(mycharts, args.outpdf)
        print("Wrote charts to %s" % args.outpdf.name)
    if args.outplottsv:
        print("Wrote .tsv file %s" % args.outplottsv.name)

    print("Done.")


start_time = datetime.now()
main()
end_time = datetime.now() - start_time

logger.debug("Execution time: %s" % end_time)
