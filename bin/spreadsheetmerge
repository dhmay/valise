#!/usr/bin/env python
"""
A shell of a Python script
"""

import argparse
import logging
from datetime import datetime
from pyvalise.io import csv_io
import math
import os
import numpy as np

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def main():
    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile1', type=argparse.FileType('r'),
                        help='input spreadsheet file 1')
    parser.add_argument('infile2', type=argparse.FileType('r'),
                        help='input spreadsheet file 2')
    parser.add_argument('mergecolumn', help='column to merge on')
    parser.add_argument('--plotcolumns', help='columns to plot (comma-separated)')
    parser.add_argument('--outpdf', type=argparse.FileType('w'),
                        help='output PDF')
    parser.add_argument('--plotlog', action="store_true",
                        help='log-transform values?')
    parser.add_argument('--missingindicator', default='NA',
                        help='a value that indicates missingness')
    parser.add_argument('--hidecorrcoef', action="store_true",
                        help='hide correlation coefficient in chart?')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    args = parser.parse_args()

    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)

    valrowmap1 = csv_io.load_csv_rowmap_by_col(args.infile1, args.mergecolumn, missing_indicator=args.missingindicator)
    print("Values of %s in file %s: %d" % (args.mergecolumn, args.infile1.name, len(valrowmap1)))
    valrowmap2 = csv_io.load_csv_rowmap_by_col(args.infile2, args.mergecolumn, missing_indicator=args.missingindicator)
    print("Values of %s in file %s: %d" % (args.mergecolumn, args.infile2.name, len(valrowmap2)))

    plotcolumns = None
    if args.outpdf:
        from pyvalise.util import charts

        assert (args.plotcolumns is not None)
        plotcolumns = args.plotcolumns.split(',')

    common_colvals = list(set(valrowmap1.keys()).intersection(set(valrowmap2.keys())))
    print("Values of %s in common: %d" % (args.mergecolumn, len(common_colvals)))

    rows1_inorder = [valrowmap1[colval] for colval in common_colvals]
    rows2_inorder = [valrowmap2[colval] for colval in common_colvals]

    if args.outpdf:
        print("Building charts...")
        mycharts = []
        for plotcolumn in plotcolumns:
            xvals = []
            yvals = []
            for i in xrange(0, len(rows1_inorder)):
                xvalstr = rows1_inorder[i][plotcolumn]
                yvalstr = rows2_inorder[i][plotcolumn]
                if xvalstr and yvalstr:
                    xval = float(xvalstr)
                    yval = float(yvalstr)
                    if args.plotlog:
                        xval = math.log(xval)
                        yval = math.log(yval)
                    xvals.append(xval)
                    yvals.append(yval)
            title = plotcolumn
            xy_cor = np.corrcoef(xvals, yvals)[0, 1]
            print("    %s, r=%f" % (plotcolumn, xy_cor))
            if args.plotlog:
                title = "ln(" + title + ")"
            if not args.hidecorrcoef:
                title = title + " (r=" + ("%.3f" % xy_cor) + ")"

            mycharts.append(charts.scatterplot(xvals, yvals, title=title,
                                               xlabel=os.path.basename(args.infile1.name),
                                               ylabel=os.path.basename(args.infile2.name)))
        charts.write_pdf(mycharts, args.outpdf)
        print("Wrote charts to %s" % args.outpdf.name)

    print("Done.")


start_time = datetime.now()
main()
end_time = datetime.now() - start_time

logger.debug("Execution time: %s" % end_time)
