#!/usr/bin/env python
"""
barchart multiple columns from a .tsv, one color per column
"""

import argparse
import logging
from datetime import datetime
from pyvalise.util import charts
import csv

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def declare_gather_args():
    """
    Declare all arguments, parse them, and return the args dict.
    Does no validation beyond the implicit validation done by argparse.
    return: a dict mapping arg names to values
    """

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=argparse.FileType('r'),
                        help='input file')
    parser.add_argument('--labelcol', help='column for labels below each cluster of bars')
    parser.add_argument('--title', help='title', default='')
    parser.add_argument('--columns', help='column names (if not specified, all but label)')
    parser.add_argument('--rotatelabels', help='rotate labels 90 degrees?', action="store_true")
    parser.add_argument('--outpdf', required=True, type=argparse.FileType('w'),
                        help='output file')

    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    return parser.parse_args()


def main():
    args = declare_gather_args()
    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    script_start_time = datetime.now()
    logger.debug("Start time: %s" % script_start_time)

    reader = csv.DictReader(args.infile, delimiter='\t')
    value_columns = reader.fieldnames[:]
    if args.columns:
        value_columns = args.columns.split(",")
        for colname in value_columns:
            assert colname in reader.fieldnames
    if args.labelcol not in reader.fieldnames:
        print("Label column %s not in file!" % args.labelcol)
    if not args.columns:
        value_columns.remove(args.labelcol)
    valueses = []
    for _ in value_columns:
        valueses.append([])
    labels = []

    for row in reader:
        labels.append(row[args.labelcol])
        for i in xrange(0, len(value_columns)):
            valueses[i].append(float(row[value_columns[i]]))

    charts.write_pdf([charts.multibar(valueses, labels, legend_labels=value_columns,
                                      title=args.title, rotate_labels=args.rotatelabels,
                                      legend_on_chart=False)], args.outpdf)
    print("Done.")

    logger.debug("End time: %s. Elapsed time: %s" % (datetime.now(), datetime.now() - script_start_time))


main()
