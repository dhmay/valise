#!/usr/bin/env python
"""
Create a venn diagram describing the set overlap between two or three columns
of values, one each from two or three files. Optionally filter the files
on the value of another column.
"""

import argparse
import logging
from datetime import datetime
import csv

__author__ = "Damon May"
__copyright__ = "Copyright (c) 2015 Damon May"
__license__ = ""
__version__ = ""

logger = logging.getLogger(__name__)


def declare_gather_args():
    """
    Declare all arguments, parse them, and return the args dict.
    Does no validation beyond the implicit validation done by argparse.
    return: a dict mapping arg names to values
    """

    # declare args
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infiles', type=argparse.FileType('r'), nargs='+',
                        help='input files')
    parser.add_argument('--column', required=True, help='column to venn')
    parser.add_argument('--filtercolumn', help='other column to filter on')
    parser.add_argument('--maxfiltervalue', type=float,
                        help='maximum value of filtercolumn')
    parser.add_argument('--labels', help='labels for files')
    parser.add_argument('--title', default='', help='chart title')
    parser.add_argument('--delimiter', default='\t', help='delimiter between columns')
    parser.add_argument('--outpdf', type=argparse.FileType('w'),
                        help='output pdf with venn')
    parser.add_argument('--outunique1', type=argparse.FileType('w'),
                        help='output file with values unique to the first file')
    parser.add_argument('--outintersection', type=argparse.FileType('w'),
                        help='output file with values occuring in every file')
    parser.add_argument('--debug', action="store_true", help='Enable debug logging')
    return parser.parse_args()


def main():
    args = declare_gather_args()
    # logging
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s: %(message)s")
    if args.debug:
        logger.setLevel(logging.DEBUG)
        # any module-specific debugging goes below

    script_start_time = datetime.now()
    logger.debug("Start time: %s" % script_start_time)

    if args.filtercolumn:
        assert args.maxfiltervalue

    # do stuff here
    value_sets = []
    for infile in args.infiles:
        reader = csv.DictReader(infile, delimiter=args.delimiter)
        value_set = set()
        assert args.column in reader.fieldnames
        if args.filtercolumn:
            assert args.filtercolumn in reader.fieldnames
        n_total_rows = 0
        n_kept_rows = 0
        for row in reader:
            n_total_rows += 1
            if not args.filtercolumn or float(row[args.filtercolumn]) < args.maxfiltervalue:
                n_kept_rows += 1
                value_set.add(row[args.column])
        print("File %s, used %d of %d rows" % (infile.name, n_kept_rows, n_total_rows))
        value_sets.append(value_set)

    labels = [infile.name for infile in args.infiles]
    if args.labels:
        labels = args.labels.split(',')
        assert(len(labels) == len(args.infiles))
    # print a summary
    for i in xrange(0, len(labels)):
        print("%s: %d" % (labels[i], len(value_sets[i])))
    headerchunks = ['']
    headerchunks.extend(labels)
    print('\t'.join(headerchunks))
    for i in xrange(0, len(labels)):
        linechunks = [labels[i]]
        for j in xrange(0, len(labels)):
            if i == j:
                overlap = len(value_sets[i])
            else:
                overlap = len(value_sets[i].intersection(value_sets[j]))
            linechunks.append(str(overlap))
        print('\t'.join(linechunks))

    if args.outpdf:
        print("Loading graphics modules....")
        from pyvalise.util import venn
        venn.logger.setLevel(logging.DEBUG)
        from pyvalise.util import charts
        mycharts = []
        mycharts.append(venn.proportional_venn_from_lists(value_sets,
                                                          title=args.title,
                                                          labels=labels))
        charts.write_pdf(mycharts, args.outpdf)

    if args.outunique1:
        unique1 = set(value_sets[0])
        for otherset in value_sets[1:len(value_sets)]:
            unique1.difference_update(otherset)
        for val in unique1:
            args.outunique1.write("%s\n" % val)
        args.outunique1.close()
        print("Wrote %s values unique to first set to file %s" % (len(unique1), args.outunique1.name))
    if args.outintersection:
        inters = set(value_sets[0])
        for otherset in value_sets[1:len(value_sets)]:
            inters.intersection_update(otherset)
        for val in inters:
            args.outintersection.write("%s\n" % val)
        args.outintersection.close()
        print("Wrote %s values that are in all sets to file %s" % (len(inters), args.outintersection.name))
    print("Done")

    logger.debug("End time: %s. Elapsed time: %s" % (datetime.now(), datetime.now() - script_start_time))


main()
